import discord
from discord import app_commands
from discord.ext import commands
import random
from utils.utils import salon_est_autorise, get_or_create_role, get_or_create_category


class UtilisateurCommands(commands.Cog):
    def __init__(self, bot):
        self.bot = bot
        # Conseils pour /conseil_aleatoire
        self.conseils = [
            "üß† R√©p√®te tes cours √† haute voix comme si tu les expliquais √† quelqu‚Äôun.",
            "‚è±Ô∏è Utilise la m√©thode Pomodoro pour g√©rer ton temps de travail.",
            "üìö Teste-toi sur des QCM plut√¥t que de relire passivement.",
            "üìù Fais des fiches synth√©tiques par th√®me au lieu de suivre l'ordre des chapitres.",
            "ü§ù √âchange avec tes camarades, enseigner est la meilleure fa√ßon d'apprendre."
        ]

    # /conseil_methodo
    @app_commands.command(name="conseil_methodo", description="Pose une question m√©thodo (public).")
    @app_commands.describe(question="Quelle est ta question m√©thodo ?")
    async def conseil_methodo(self, interaction: discord.Interaction, question: str):
        if not salon_est_autorise("conseil_methodo", interaction.channel_id):
            return await interaction.response.send_message("‚ùå Commande non autoris√©e dans ce salon.", ephemeral=True)

        embed = discord.Embed(
            title="Nouvelle question m√©thodo",
            description=question,
            color=discord.Color.blurple()
        )
        embed.set_footer(text=f"Pos√©e par {interaction.user.display_name}")
        await interaction.channel.send(embed=embed)
        await interaction.response.send_message("‚úÖ Ta question a √©t√© envoy√©e !", ephemeral=True)

    # /conseil_aleatoire
    @app_commands.command(name="conseil_aleatoire", description="Donne un conseil de travail al√©atoire.")
    async def conseil_aleatoire(self, interaction: discord.Interaction):
        if not salon_est_autorise("conseil_aleatoire", interaction.channel_id):
            return await interaction.response.send_message("‚ùå Commande non autoris√©e dans ce salon.", ephemeral=True)

        conseil = random.choice(self.conseils)
        await interaction.response.send_message(f"üí° Conseil : **{conseil}**", ephemeral=True)

    # /ressources
    @app_commands.command(name="ressources", description="Liste des ressources utiles.")
    async def ressources(self, interaction: discord.Interaction):
        if not salon_est_autorise("ressources", interaction.channel_id):
            return await interaction.response.send_message("‚ùå Commande non autoris√©e dans ce salon.", ephemeral=True)

        embed = discord.Embed(
            title="Ressources utiles",
            description="Voici quelques liens et documents qui pourraient t'aider :",
            color=discord.Color.green()
        )
        embed.add_field(name="üîó Fiches M√©thodo", value="[Acc√©der](https://exemple.com/fiches)", inline=False)
        embed.add_field(name="üìù Tableur de planning", value="[Google Sheets](https://docs.google.com)", inline=False)
        embed.add_field(name="üéß Podcast Motivation", value="[Podcast X](https://podcast.com)", inline=False)
        await interaction.response.send_message(embed=embed, ephemeral=True)

    # /mission_du_jour
    @app_commands.command(name="mission_du_jour", description="Obtiens un mini-d√©fi pour la journ√©e.")
    async def mission_du_jour(self, interaction: discord.Interaction):
        if not salon_est_autorise("mission_du_jour", interaction.channel_id):
            return await interaction.response.send_message("‚ùå Commande non autoris√©e dans ce salon.", ephemeral=True)

        missions = [
            "üìµ √âvite les r√©seaux sociaux jusqu'√† 20h.",
            "üßò‚Äç‚ôÇÔ∏è Fais 5 min de respiration avant de commencer √† r√©viser.",
            "üìñ Relis 2 fiches avant le coucher.",
            "üíå Envoie un message d‚Äôencouragement √† un camarade.",
            "üßπ Range ton espace de travail pour gagner en clart√©."
        ]
        await interaction.response.send_message(f"üéØ Mission du jour : **{random.choice(missions)}**", ephemeral=True)

    # /checkin
    @app_commands.command(name="checkin", description="Exprime ton humeur avec un emoji.")
    @app_commands.describe(humeur="Ex: üòÄ, üòû, üò¥, etc.")
    async def checkin(self, interaction: discord.Interaction, humeur: str):
        if not salon_est_autorise("checkin", interaction.channel_id):
            return await interaction.response.send_message("‚ùå Commande non autoris√©e dans ce salon.", ephemeral=True)

        await interaction.response.send_message(f"üìå Humeur enregistr√©e : {humeur}", ephemeral=True)
    @app_commands.command(name="cours_aide", description="Demande d'aide sur un cours via modal. Le message de demande est envoy√© dans ce salon, et le r√¥le d'aide d√©fini par admin est ping√© dans le canal priv√©.")
    async def cours_aide(self, interaction: discord.Interaction):
        if not salon_est_autorise("cours_aide", interaction.channel_id):
            return await interaction.response.send_message("‚ùå Commande non autoris√©e dans ce salon.", ephemeral=True)

        # D√©finition du modal pour recueillir la demande d'aide
        class CoursAideModal(discord.ui.Modal, title="Demande d'aide sur un cours"):
            cours = discord.ui.TextInput(
                label="Cours concern√©",
                placeholder="Ex : Math√©matiques, Physique, etc.",
                required=True
            )
            details = discord.ui.TextInput(
                label="D√©taillez votre probl√®me",
                style=discord.TextStyle.paragraph,
                placeholder="Expliquez pr√©cis√©ment ce que vous n'avez pas compris.",
                required=True
            )
            async def on_submit(modal_interaction: discord.Interaction):
                user = modal_interaction.user
                guild = modal_interaction.guild

                # Cr√©er un r√¥le temporaire pour le demandeur et l'ajouter
                temp_role = await get_or_create_role(guild, f"CoursAide-{user.name}")
                await user.add_roles(temp_role)

                # R√©cup√©rer le r√¥le d'aide d√©fini par admin via la config (option "role_aide")
                from utils.utils import charger_config
                config = charger_config()
                role_aide_id = config.get("role_aide")  # L'admin doit configurer cette option
                role_aide = guild.get_role(int(role_aide_id)) if role_aide_id else None

                # D√©finir les permissions : acc√®s autoris√© pour le r√¥le temporaire et, si d√©fini, le r√¥le d'aide
                overwrites = {
                    guild.default_role: discord.PermissionOverwrite(read_messages=False),
                    temp_role: discord.PermissionOverwrite(read_messages=True, send_messages=True)
                }
                if role_aide:
                    overwrites[role_aide] = discord.PermissionOverwrite(read_messages=True, send_messages=True)

                # Cr√©er une cat√©gorie priv√©e d√©di√©e √† cette demande
                category = await guild.create_category(f"cours-aide-{user.name}".lower(), overwrites=overwrites)
                # Cr√©er automatiquement un salon textuel et un salon vocal dans cette cat√©gorie
                discussion_channel = await guild.create_text_channel("discussion", category=category)
                await guild.create_voice_channel("support-voice", category=category)
                # Dans le salon textuel, ping le r√¥le d'aide si d√©fini
                if role_aide:
                    await discussion_channel.send(f"üîî {role_aide.mention} une nouvelle demande d'aide a √©t√© cr√©√©e par {user.mention} !")
                    
                # Pr√©parer l'embed √† envoyer dans le salon o√π la commande a √©t√© utilis√©e
                description = f"**Cours :** {self.cours.value}\n**D√©tails :** {self.details.value}"
                embed = discord.Embed(title="Demande d'aide sur un cours", description=description, color=discord.Color.blue())
                embed.set_footer(text=f"Demand√©e par {user.display_name}")
                
                # Cr√©er la vue avec les deux boutons
                view = CoursAideView(user, category, temp_role)
                await modal_interaction.response.send_message(embed=embed, view=view)

        # D√©finition de la vue avec boutons (√† placer aussi dans ce m√™me bloc)
        class CoursAideView(discord.ui.View):
            def __init__(self, demandeur: discord.Member, category: discord.CategoryChannel, temp_role: discord.Role):
                super().__init__(timeout=None)
                self.demandeur = demandeur
                self.category = category
                self.temp_role = temp_role

            @discord.ui.button(label="J'ai aussi ce probl√®me", style=discord.ButtonStyle.primary, custom_id="btn_probleme")
            async def probleme_button(self, interaction: discord.Interaction, button: discord.ui.Button):
                # Ajouter le r√¥le temporaire √† l'utilisateur s'il n'est pas d√©j√† membre
                if self.temp_role not in interaction.user.roles:
                    await interaction.user.add_roles(self.temp_role)
                    await interaction.response.send_message("‚úÖ Vous avez rejoint cette demande d'aide.", ephemeral=True)
                else:
                    await interaction.response.send_message("‚ÑπÔ∏è Vous √™tes d√©j√† associ√© √† cette demande.", ephemeral=True)

            @discord.ui.button(label="Supprimer la demande", style=discord.ButtonStyle.danger, custom_id="btn_supprimer")
            async def supprimer_button(self, interaction: discord.Interaction, button: discord.ui.Button):
                if interaction.user != self.demandeur:
                    return await interaction.response.send_message("‚ùå Seul le demandeur peut supprimer cette demande.", ephemeral=True)
                try:
                    await self.category.delete()
                except Exception as e:
                    return await interaction.response.send_message(f"‚ùå Erreur lors de la suppression de la cat√©gorie : {e}", ephemeral=True)
                try:
                    await self.demandeur.remove_roles(self.temp_role)
                except Exception as e:
                    return await interaction.response.send_message(f"‚ùå Erreur lors du retrait du r√¥le : {e}", ephemeral=True)
                await interaction.response.send_message("‚úÖ Demande supprim√©e ; la cat√©gorie priv√©e et le r√¥le temporaire ont √©t√© retir√©s.", ephemeral=True)

        # Afficher le modal √† l'utilisateur qui a lanc√© la commande
        await interaction.response.send_modal(CoursAideModal())
    

    

async def setup_user_commands(bot):
    await bot.add_cog(UtilisateurCommands(bot))
