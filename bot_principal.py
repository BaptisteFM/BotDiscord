import os
import discord
from discord.ext import commands, tasks
from discord import app_commands
from discord.ui import Modal, TextInput
from discord import TextStyle

import json
import time
import asyncio
import textwrap
import datetime
from bson import ObjectId
from pymongo import MongoClient
from dotenv import load_dotenv

# ========================================
# üîê Chargement s√©curis√© du fichier .env
# ========================================
if not load_dotenv():
    print("‚ùå Le fichier .env n'a pas pu √™tre charg√© ou est introuvable.")

TOKEN = os.getenv("DISCORD_TOKEN")
MONGODB_URI = os.getenv("MONGODB_URI")

# S√©curit√© renforc√©e : v√©rifie que les variables sont bien charg√©es
if not TOKEN:
    raise ValueError("‚ùå DISCORD_TOKEN est introuvable. V√©rifie ton .env et son chargement.")
if not MONGODB_URI:
    raise ValueError("‚ùå MONGODB_URI est introuvable. V√©rifie ton .env et son chargement.")

print("‚úÖ Variables d'environnement charg√©es.")

# ========================================
# üì° Connexion √† MongoDB Atlas
# ========================================
try:
    mongo_client = MongoClient(MONGODB_URI)
    mongo_client.admin.command("ping")
    print("‚úÖ Connexion MongoDB Atlas r√©ussie.")
except Exception as e:
    raise ConnectionError(f"‚ùå √âchec connexion MongoDB : {e}")

# Base et collections MongoDB
mongo_db = mongo_client["discord_bot"]
xp_collection = mongo_db["xp"]
programmed_messages_collection = mongo_db["programmed_messages"]
defis_collection = mongo_db["defis"]

# ========================================
# ‚öôÔ∏è Configuration des intents
# ========================================
intents = discord.Intents.default()
intents.message_content = True
intents.members = True
intents.guilds = True
intents.reactions = True
intents.voice_states = True

# ========================================
# ü§ñ Classe principale du bot
# ========================================
class MyBot(commands.Bot):
    def __init__(self):
        super().__init__(command_prefix="!", intents=intents)
        self.reaction_roles = {}
        self.vocal_start_times = {}
        self.xp_config = {
            "xp_per_message": 10,
            "xp_per_minute_vocal": 5,
            "multipliers": {},           # {channel_id: x2.0}
            "level_roles": {},           # {xp: role_id}
            "announcement_channel": None,
            "announcement_message": "üéâ {mention} a atteint {xp} XP !",
            "xp_command_channel": None,
            "xp_command_min_xp": 0,
            "badges": {},                # {xp: badge}
            "titres": {}                 # {xp: titre}
        }
        self.programmed_messages = {}

    async def setup_hook(self):
        try:
            mongo_client.admin.command("ping")
            print("‚úÖ MongoDB toujours accessible depuis setup_hook().")
        except Exception as e:
            print(f"‚ùå Probl√®me MongoDB dans setup_hook() : {e}")

        try:
            synced = await self.tree.sync(guild=None)
            print(f"üåê {len(synced)} commandes slash synchronis√©es (globalement)")
        except Exception as e:
            print(f"‚ùå Erreur de synchronisation des slash commands : {e}")

# ========================================
# üß† Instanciation du bot
# ========================================
bot = MyBot()
tree = bot.tree




# ========================================
# üé≠ /roledereaction ‚Äî Ajoute une r√©action √† un message existant ou en cr√©e un nouveau via un modal
# ========================================

class RoleReactionModal(discord.ui.Modal, title="‚úçÔ∏è Cr√©er un message avec formatage"):

    def __init__(self, emoji, role, salon):
        super().__init__(timeout=None)
        self.emoji = emoji
        self.role = role
        self.salon = salon

        self.contenu = TextInput(
            label="Texte du message",
            style=TextStyle.paragraph,
            placeholder="Entre ton message ici (sauts de ligne autoris√©s)",
            required=True,
            max_length=2000,
            custom_id="roledereaction_contenu"
        )
        self.add_item(self.contenu)

    async def on_submit(self, interaction: discord.Interaction):
        await interaction.response.defer(ephemeral=True)

        try:
            message_envoye = await self.salon.send(textwrap.dedent(self.contenu.value))
            await message_envoye.add_reaction(self.emoji)

            emoji_key = (
                str(self.emoji) if not self.emoji.is_custom_emoji()
                else f"<:{self.emoji.name}:{self.emoji.id}>"
            )

            bot.reaction_roles[message_envoye.id] = {emoji_key: self.role.id}

            await interaction.followup.send(
                f"‚úÖ Nouveau message envoy√© dans {self.salon.mention}\n"
                f"- Emoji utilis√© : {self.emoji}\n"
                f"- R√¥le associ√© : **{self.role.name}**",
                ephemeral=True
            )

        except Exception as e:
            await interaction.followup.send(f"‚ùå Erreur lors de l'envoi du message : {e}", ephemeral=True)


@bot.tree.command(name="roledereaction", description="Ajoute une r√©action √† un message existant ou en cr√©e un nouveau via un modal")
@app_commands.checks.has_permissions(administrator=True)
@app_commands.describe(
    emoji="Emoji √† utiliser",
    role="R√¥le √† attribuer",
    message_id="ID du message existant (laisse vide pour en cr√©er un)",
    salon="Salon pour envoyer le message si cr√©ation"
)
async def roledereaction(
    interaction: discord.Interaction,
    emoji: str,
    role: discord.Role,
    message_id: str = None,
    salon: discord.TextChannel = None
):
    try:
        if message_id:
            await interaction.response.defer(ephemeral=True)

            try:
                msg_id_int = int(message_id)
                msg = await interaction.channel.fetch_message(msg_id_int)
                await msg.add_reaction(emoji)

                emoji_key = (
                    str(emoji) if not discord.PartialEmoji.from_str(emoji).is_custom_emoji()
                    else emoji
                )

                if msg_id_int in bot.reaction_roles:
                    bot.reaction_roles[msg_id_int][emoji_key] = role.id
                else:
                    bot.reaction_roles[msg_id_int] = {emoji_key: role.id}

                await interaction.followup.send(
                    f"‚úÖ R√©action {emoji} ajout√©e au message `{message_id}` pour le r√¥le **{role.name}**",
                    ephemeral=True
                )

            except Exception as e:
                await interaction.followup.send(f"‚ùå Erreur lors de l'ajout de la r√©action : {e}", ephemeral=True)

        else:
            if not salon:
                await interaction.response.send_message(
                    "‚ùå Merci de sp√©cifier un salon si tu veux cr√©er un nouveau message.",
                    ephemeral=True
                )
                return

            try:
                modal = RoleReactionModal(emoji, role, salon)
                await interaction.response.send_modal(modal)
            except Exception as e:
                await interaction.response.send_message(f"‚ùå Erreur lors de l‚Äôouverture du modal : {e}", ephemeral=True)

    except Exception as e:
        if not interaction.response.is_done():
            await interaction.response.send_message(f"‚ùå Erreur inattendue : {str(e)}", ephemeral=True)
        else:
            await interaction.followup.send(f"‚ùå Erreur fatale : {str(e)}", ephemeral=True)

# ========================================
# üé≠ Fonction : /ajout_reaction_id
# Ajoute un emoji √† un message d√©j√† publi√© pour donner un r√¥le
# ========================================

@tree.command(name="ajout_reaction_id", description="Ajoute une r√©action √† un message d√©j√† publi√©")
@app_commands.checks.has_permissions(administrator=True)
@app_commands.describe(
    role="R√¥le √† attribuer",
    emoji="Emoji √† utiliser",
    message_id="ID du message existant"
)
async def ajout_reaction_id(interaction: discord.Interaction, role: discord.Role, emoji: str, message_id: str):
    try:
        msg_id = int(message_id)
        msg = await interaction.channel.fetch_message(msg_id)
        await msg.add_reaction(emoji)

        if msg_id in bot.reaction_roles:
            bot.reaction_roles[msg_id][emoji] = role.id
        else:
            bot.reaction_roles[msg_id] = {emoji: role.id}

        await interaction.response.send_message(
            f"‚úÖ R√©action {emoji} ajout√©e au message {msg_id} pour {role.name}", ephemeral=True
        )
    except Exception as e:
        await interaction.response.send_message(f"‚ùå Erreur : {str(e)}", ephemeral=True)




# ========================================
# üé≠ Fonction : /supprimer_reaction_role
# Supprime le lien entre un emoji et un r√¥le pour un message donn√©
# ========================================

@tree.command(name="supprimer_reaction_role", description="Supprime le lien entre une r√©action et un r√¥le")
@app_commands.checks.has_permissions(administrator=True)
@app_commands.describe(
    message_id="ID du message",
    emoji="Emoji √† retirer"
)
async def supprimer_reaction_role(interaction: discord.Interaction, message_id: str, emoji: str):
    try:
        msg_id = int(message_id)
        if msg_id in bot.reaction_roles and emoji in bot.reaction_roles[msg_id]:
            del bot.reaction_roles[msg_id][emoji]
            await interaction.response.send_message(
                f"‚úÖ Le lien {emoji} - r√¥le a √©t√© supprim√© du message {message_id}", ephemeral=True
            )
        else:
            await interaction.response.send_message(
                f"‚ùå Aucun lien trouv√© pour {emoji} sur le message {message_id}", ephemeral=True
            )
    except Exception as e:
        await interaction.response.send_message(f"‚ùå Erreur : {str(e)}", ephemeral=True)




# ========================================
# üé≠ Gestion automatique des r√¥les via r√©actions (blind√©e + emoji custom)
# ========================================

@bot.event
async def on_raw_reaction_add(payload):
    if payload.user_id == bot.user.id:
        return

    guild = bot.get_guild(payload.guild_id)
    if guild is None:
        return

    member = guild.get_member(payload.user_id)
    if member is None or member.bot:
        return

    # ‚úÖ Gestion correcte des emojis custom
    emoji_key = (
        str(payload.emoji) if not payload.emoji.is_custom_emoji()
        else f"<:{payload.emoji.name}:{payload.emoji.id}>"
    )

    data = bot.reaction_roles.get(payload.message_id)
    if isinstance(data, dict):
        role_id = data.get(emoji_key)
        if role_id:
            role = guild.get_role(int(role_id))
            if role:
                try:
                    await member.add_roles(role, reason="R√©action ajout√©e")
                except Exception as e:
                    print(f"‚ùå Erreur ajout r√¥le : {e}")

@bot.event
async def on_raw_reaction_remove(payload):
    if payload.user_id == bot.user.id:
        return

    guild = bot.get_guild(payload.guild_id)
    if guild is None:
        return

    member = guild.get_member(payload.user_id)
    if member is None or member.bot:
        return

    # ‚úÖ Gestion correcte des emojis custom
    emoji_key = (
        str(payload.emoji) if not payload.emoji.is_custom_emoji()
        else f"<:{payload.emoji.name}:{payload.emoji.id}>"
    )

    data = bot.reaction_roles.get(payload.message_id)
    if isinstance(data, dict):
        role_id = data.get(emoji_key)
        if role_id:
            role = guild.get_role(int(role_id))
            if role:
                try:
                    await member.remove_roles(role, reason="R√©action retir√©e")
                except Exception as e:
                    print(f"‚ùå Erreur retrait r√¥le : {e}")





# ========================================
# üß† Syst√®me XP MongoDB : Messages + Vocal
# ========================================

# ‚úÖ Ajoute de l'XP √† un membre
def add_xp(user_id, amount):
    user_id = str(user_id)
    existing = xp_collection.find_one({"user_id": user_id})
    if existing:
        new_total = existing["xp"] + amount
        xp_collection.update_one({"user_id": user_id}, {"$set": {"xp": new_total}})
    else:
        new_total = amount
        xp_collection.insert_one({"user_id": user_id, "xp": new_total})
    return new_total

# ‚úÖ R√©cup√®re l'XP actuel d'un membre
def get_xp(user_id):
    user_id = str(user_id)
    result = xp_collection.find_one({"user_id": user_id})
    return result["xp"] if result else 0

# üéØ Ajoute de l'XP lors des messages
@bot.event
async def on_message(message):
    if message.author.bot:
        return

    xp = bot.xp_config["xp_per_message"]
    multiplier = bot.xp_config["multipliers"].get(str(message.channel.id), 1.0)
    total_xp = int(xp * multiplier)
    current_xp = add_xp(message.author.id, total_xp)

    # üîì Attribution de r√¥le si palier atteint
    for level_xp, role_id in bot.xp_config["level_roles"].items():
        if current_xp >= int(level_xp):
            role = message.guild.get_role(int(role_id))
            if role and role not in message.author.roles:
                await message.author.add_roles(role, reason="XP atteint")

                # üì¢ Annonce de niveau
                if bot.xp_config["announcement_channel"]:
                    channel = bot.get_channel(int(bot.xp_config["announcement_channel"]))
                    if channel:
                        annonce = bot.xp_config["announcement_message"].replace("{mention}", message.author.mention).replace("{xp}", str(current_xp))
                        await channel.send(annonce)

    await bot.process_commands(message)

# üéôÔ∏è Ajoute de l'XP vocal automatiquement
@bot.event
async def on_voice_state_update(member, before, after):
    if not before.channel and after.channel:
        bot.vocal_start_times[member.id] = time.time()
    elif before.channel and not after.channel:
        if member.id in bot.vocal_start_times:
            duration = int((time.time() - bot.vocal_start_times[member.id]) / 60)
            multiplier = bot.xp_config["multipliers"].get(str(before.channel.id), 1.0)
            gained = int(duration * bot.xp_config["xp_per_minute_vocal"] * multiplier)
            current_xp = add_xp(member.id, gained)

            for level_xp, role_id in bot.xp_config["level_roles"].items():
                if current_xp >= int(level_xp):
                    role = member.guild.get_role(int(role_id))
                    if role and role not in member.roles:
                        await member.add_roles(role, reason="XP vocal atteint")

                        if bot.xp_config["announcement_channel"]:
                            channel = bot.get_channel(int(bot.xp_config["announcement_channel"]))
                            if channel:
                                annonce = bot.xp_config["announcement_message"].replace("{mention}", member.mention).replace("{xp}", str(current_xp))
                                await channel.send(annonce)
            del bot.vocal_start_times[member.id]






# ========================================
# üìä Fonctions XP membres : /xp et /leaderboard
# ========================================

@bot.tree.command(name="xp", description="Affiche ton XP (r√©serv√© √† un salon / niveau minimum)")
async def xp(interaction: discord.Interaction):
    config = bot.xp_config
    user_xp = get_xp(interaction.user.id)

    if config["xp_command_channel"] and interaction.channel.id != int(config["xp_command_channel"]):
        await interaction.response.send_message("‚ùå Cette commande n'est pas autoris√©e dans ce salon.", ephemeral=True)
        return

    if user_xp < config["xp_command_min_xp"]:
        await interaction.response.send_message("‚ùå Tu n'as pas encore assez d'XP pour voir ton profil.", ephemeral=True)
        return

    # üî∞ Cherche le bon badge
    badge = ""
    for seuil, b in sorted(bot.xp_config["badges"].items(), key=lambda x: int(x[0]), reverse=True):
        if user_xp >= int(seuil):
            badge = b
            break

    # üè∑Ô∏è Cherche le bon titre
    titre = ""
    for seuil, t in sorted(bot.xp_config["titres"].items(), key=lambda x: int(x[0]), reverse=True):
        if user_xp >= int(seuil):
            titre = t
            break

    texte = textwrap.dedent(f"""
        üîπ {interaction.user.mention}, tu as **{user_xp} XP**.
        {"üèÖ Badge : **" + badge + "**" if badge else ""}
        {"üìõ Titre : **" + titre + "**" if titre else ""}
    """)
    await interaction.response.send_message(texte.strip(), ephemeral=True)

# ----------------------------------------

@bot.tree.command(name="leaderboard", description="Classement des membres avec le plus d'XP")
async def leaderboard(interaction: discord.Interaction):
    config = bot.xp_config
    user_xp = get_xp(interaction.user.id)

    if config["xp_command_channel"] and interaction.channel.id != int(config["xp_command_channel"]):
        await interaction.response.send_message("‚ùå Cette commande n'est pas autoris√©e dans ce salon.", ephemeral=True)
        return

    if user_xp < config["xp_command_min_xp"]:
        await interaction.response.send_message("‚ùå Tu n'as pas encore assez d'XP pour voir le classement.", ephemeral=True)
        return

    # üìä R√©cup√©ration du classement depuis MongoDB
    classement = list(xp_collection.find().sort("xp", -1).limit(10))

    lignes = []
    for i, record in enumerate(classement):
        membre = interaction.guild.get_member(int(record["user_id"]))
        if membre:
            lignes.append(f"{i+1}. {membre.display_name} ‚Äî {record['xp']} XP")
        else:
            lignes.append(f"{i+1}. (Utilisateur inconnu) ‚Äî {record['xp']} XP")

    if not lignes:
        texte = "Aucun membre avec de l'XP pour le moment."
    else:
        texte = textwrap.dedent(f"""
            üèÜ **Top 10 XP :**
            {chr(10).join(lignes)}
        """)


    await interaction.response.send_message(texte.strip(), ephemeral=True)




# ========================================
# üõ†Ô∏è Commandes ADMIN : configuration du syst√®me XP (MongoDB)
# ========================================

from bson.objectid import ObjectId  # Au cas o√π tu l'utiliserais dans d'autres commandes plus tard

# ----------------------------------------
# ========================================
# üõ†Ô∏è Commande /add_xp ‚Äî version blind√©e MongoDB
# ========================================
@bot.tree.command(name="add_xp", description="Ajoute de l'XP √† un membre (admin)")
@app_commands.checks.has_permissions(administrator=True)
@app_commands.describe(member="Membre cibl√©", amount="Quantit√© d'XP √† ajouter")
async def add_xp_cmd(interaction: discord.Interaction, member: discord.Member, amount: int):
    try:
        user_id = str(member.id)

        # V√©rifie si l'utilisateur a d√©j√† un enregistrement
        user_data = xp_collection.find_one({"user_id": user_id})
        new_total = (user_data["xp"] if user_data else 0) + amount

        # Mets √† jour ou ins√®re l'entr√©e
        xp_collection.update_one(
            {"user_id": user_id},
            {"$set": {"xp": new_total}},
            upsert=True
        )

        texte = textwrap.dedent(f"""
            ‚úÖ {amount} XP ajout√©s √† {member.mention}
            üîπ Total : **{new_total} XP**
        """)
        await interaction.response.send_message(texte.strip(), ephemeral=True)

    except Exception as e:
        await interaction.response.send_message(
            f"‚ùå Une erreur est survenue lors de l'ajout d'XP : {str(e)}",
            ephemeral=True
        )


# ----------------------------------------
@bot.tree.command(name="set_xp_config", description="Modifie l'XP gagn√© par message et en vocal")
@app_commands.checks.has_permissions(administrator=True)
@app_commands.describe(xp_per_message="XP/message", xp_per_minute_vocal="XP/minute vocal")
async def set_xp_config(interaction: discord.Interaction, xp_per_message: int, xp_per_minute_vocal: int):
    bot.xp_config["xp_per_message"] = xp_per_message
    bot.xp_config["xp_per_minute_vocal"] = xp_per_minute_vocal

    texte = textwrap.dedent(f"""
        ‚úÖ XP configur√© :
        ‚Ä¢ üí¨ Messages : **{xp_per_message} XP**
        ‚Ä¢ üéôÔ∏è Vocal : **{xp_per_minute_vocal} XP/min**
    """)
    await interaction.response.send_message(texte.strip(), ephemeral=True)

# ----------------------------------------
@bot.tree.command(name="set_xp_role", description="D√©finit un r√¥le √† d√©bloquer √† partir d'un seuil d'XP")
@app_commands.checks.has_permissions(administrator=True)
@app_commands.describe(xp="XP requis", role="R√¥le √† attribuer")
async def set_xp_role(interaction: discord.Interaction, xp: int, role: discord.Role):
    bot.xp_config["level_roles"][str(xp)] = role.id
    await interaction.response.send_message(
        f"‚úÖ Le r√¥le **{role.name}** sera attribu√© √† partir de **{xp} XP**",
        ephemeral=True
    )

# ----------------------------------------
@bot.tree.command(name="set_xp_boost", description="Ajoute un multiplicateur d'XP √† un salon")
@app_commands.checks.has_permissions(administrator=True)
@app_commands.describe(channel="Salon cibl√©", multiplier="Ex : 2.0 = XP x2")
async def set_xp_boost(interaction: discord.Interaction, channel: discord.TextChannel, multiplier: float):
    bot.xp_config["multipliers"][str(channel.id)] = multiplier
    await interaction.response.send_message(
        f"‚úÖ Multiplicateur **x{multiplier}** appliqu√© √† {channel.mention}",
        ephemeral=True
    )

# ----------------------------------------
@bot.tree.command(name="set_salon_annonce_niveau", description="D√©finit le salon o√π sont envoy√©es les annonces de niveau")
@app_commands.checks.has_permissions(administrator=True)
@app_commands.describe(channel="Salon d'annonce")
async def set_salon_annonce(interaction: discord.Interaction, channel: discord.TextChannel):
    bot.xp_config["announcement_channel"] = str(channel.id)
    await interaction.response.send_message(
        f"‚úÖ Les annonces de niveau seront envoy√©es dans {channel.mention}",
        ephemeral=True
    )

# ----------------------------------------
@bot.tree.command(name="set_message_annonce_niveau", description="Modifie le message d‚Äôannonce de niveau")
@app_commands.checks.has_permissions(administrator=True)
@app_commands.describe(message="Utilise {mention} et {xp} comme variables")
async def set_message_annonce(interaction: discord.Interaction, message: str):
    bot.xp_config["announcement_message"] = message
    preview = message.replace("{mention}", interaction.user.mention).replace("{xp}", "1234")
    await interaction.response.send_message(
        f"‚úÖ Message d'annonce mis √† jour !\n\nüí¨ **Aper√ßu :**\n{preview}",
        ephemeral=True
    )

# ----------------------------------------
@bot.tree.command(name="set_channel_xp_commands", description="D√©finit le salon pour les commandes /xp et /leaderboard")
@app_commands.checks.has_permissions(administrator=True)
@app_commands.describe(channel="Salon autoris√©")
async def set_channel_xp(interaction: discord.Interaction, channel: discord.TextChannel):
    bot.xp_config["xp_command_channel"] = str(channel.id)
    await interaction.response.send_message(
        f"‚úÖ Les commandes XP sont maintenant limit√©es √† {channel.mention}",
        ephemeral=True
    )

# ----------------------------------------
@bot.tree.command(name="set_minimum_xp_command", description="XP minimum requis pour voir /xp ou /leaderboard")
@app_commands.checks.has_permissions(administrator=True)
@app_commands.describe(min_xp="XP minimum requis")
async def set_minimum_xp(interaction: discord.Interaction, min_xp: int):
    bot.xp_config["xp_command_min_xp"] = min_xp
    await interaction.response.send_message(
        f"‚úÖ Il faut maintenant **{min_xp} XP** pour voir les commandes /xp et /leaderboard",
        ephemeral=True
    )

# ----------------------------------------
@bot.tree.command(name="ajouter_badge", description="D√©finit un badge √† d√©bloquer √† partir d'un certain XP")
@app_commands.checks.has_permissions(administrator=True)
@app_commands.describe(xp="XP requis", badge="Nom ou emoji du badge")
async def ajouter_badge(interaction: discord.Interaction, xp: int, badge: str):
    bot.xp_config["badges"][str(xp)] = badge
    await interaction.response.send_message(
        f"‚úÖ Badge **{badge}** ajout√© √† partir de **{xp} XP**",
        ephemeral=True
    )

# ----------------------------------------
@bot.tree.command(name="ajouter_titre", description="D√©finit un titre √† d√©bloquer √† partir d'un certain XP")
@app_commands.checks.has_permissions(administrator=True)
@app_commands.describe(xp="XP requis", titre="Titre √† d√©bloquer")
async def ajouter_titre(interaction: discord.Interaction, xp: int, titre: str):
    bot.xp_config["titres"][str(xp)] = titre
    await interaction.response.send_message(
        f"‚úÖ Titre **{titre}** ajout√© √† partir de **{xp} XP**",
        ephemeral=True
    )




# ========================================
# ‚è∞ Syst√®me de messages programm√©s ‚Äî MONGODB (VERSION BLIND√âE)
# ========================================

from discord.ext import tasks
from discord import TextStyle, app_commands
from discord.ui import Modal, TextInput
import datetime, textwrap, time
from bson import ObjectId

# üîÅ Boucle de v√©rification
@tasks.loop(seconds=30)
async def check_programmed_messages():
    await bot.wait_until_ready()
    now = datetime.datetime.now().strftime("%d/%m/%Y %H:%M")

    try:
        messages = list(programmed_messages_collection.find())
        for msg in messages:
            if msg.get("next") == now:
                try:
                    channel = bot.get_channel(int(msg["channel_id"]))
                    if channel:
                        await channel.send(textwrap.dedent(msg["message"]))
                        print(f"üì§ Message envoy√© dans {channel.name} ({msg['_id']})")
                except Exception as e:
                    print(f"‚ùå Erreur envoi message programm√© [{msg['_id']}] : {e}")

                if msg.get("type") == "once":
                    programmed_messages_collection.delete_one({"_id": msg["_id"]})
                else:
                    try:
                        current = datetime.datetime.strptime(msg["next"], "%d/%m/%Y %H:%M")
                        if msg["type"] == "daily":
                            current += datetime.timedelta(days=1)
                        elif msg["type"] == "weekly":
                            current += datetime.timedelta(weeks=1)

                        next_date = current.strftime("%d/%m/%Y %H:%M")
                        programmed_messages_collection.update_one(
                            {"_id": msg["_id"]},
                            {"$set": {"next": next_date}}
                        )
                    except Exception as e:
                        print(f"‚ùå Erreur recalcul date [{msg['_id']}] : {e}")
                        programmed_messages_collection.delete_one({"_id": msg["_id"]})
    except Exception as e:
        print(f"‚ùå Erreur boucle messages programm√©s : {e}")

# üì• Modal de cr√©ation
class ProgrammerMessageModal(Modal, title="üóìÔ∏è Programmer un message"):

    def __init__(self, salon, type, date_heure):
        super().__init__(timeout=None)
        self.salon = salon
        self.type = type
        self.date_heure = date_heure

        self.contenu = TextInput(
            label="Contenu du message",
            style=TextStyle.paragraph,
            placeholder="Tape ici ton message √† programmer...",
            required=True,
            max_length=2000
        )
        self.add_item(self.contenu)

    async def on_submit(self, interaction: discord.Interaction):
        await interaction.response.defer(ephemeral=True)
        try:
            doc = {
                "channel_id": str(self.salon.id),
                "message": textwrap.dedent(self.contenu.value),
                "type": self.type.lower(),
                "next": self.date_heure
            }
            programmed_messages_collection.insert_one(doc)
            await interaction.followup.send(
                f"‚úÖ Message planifi√© pour **{self.date_heure}** ({self.type}) dans {self.salon.mention}",
                ephemeral=True
            )
        except Exception as e:
            await interaction.followup.send(f"‚ùå Erreur : {str(e)}", ephemeral=True)

# ‚úÖ /programmer_message
@tree.command(name="programmer_message", description="Planifie un message automatique")
@app_commands.checks.has_permissions(administrator=True)
@app_commands.describe(
    salon="Salon o√π envoyer le message",
    type="Type d'envoi : once, daily ou weekly",
    date_heure="Date et heure du 1er envoi (JJ/MM/AAAA HH:MM)"
)
async def programmer_message(interaction: discord.Interaction, salon: discord.TextChannel, type: str, date_heure: str):
    try:
        datetime.datetime.strptime(date_heure, "%d/%m/%Y %H:%M")
    except ValueError:
        await interaction.response.send_message("‚ùå Format invalide. Utilise : JJ/MM/AAAA HH:MM", ephemeral=True)
        return

    try:
        await interaction.response.send_modal(ProgrammerMessageModal(salon, type, date_heure))
    except Exception as e:
        await interaction.followup.send(f"‚ùå Erreur lors de l'ouverture du modal : {e}", ephemeral=True)

# üóëÔ∏è /supprimer_message
@tree.command(name="supprimer_message", description="Supprime un message programm√©")
@app_commands.checks.has_permissions(administrator=True)
@app_commands.describe(message_id="ID MongoDB du message √† supprimer")
async def supprimer_message(interaction: discord.Interaction, message_id: str):
    try:
        result = programmed_messages_collection.delete_one({"_id": ObjectId(message_id)})
        if result.deleted_count > 0:
            await interaction.response.send_message("‚úÖ Message supprim√©.", ephemeral=True)
        else:
            await interaction.response.send_message("‚ùå ID non trouv√©.", ephemeral=True)
    except Exception as e:
        await interaction.response.send_message(f"‚ùå Erreur : {str(e)}", ephemeral=True)

# üìã /messages_programmes
@tree.command(name="messages_programmes", description="Affiche les messages programm√©s")
@app_commands.checks.has_permissions(administrator=True)
async def messages_programmes(interaction: discord.Interaction):
    try:
        docs = list(programmed_messages_collection.find())
        if not docs:
            await interaction.response.send_message("Aucun message programm√©.", ephemeral=True)
            return

        texte = "**üóìÔ∏è Messages programm√©s :**\n"
        for doc in docs:
            texte += f"üÜî `{doc['_id']}` ‚Äî Salon : <#{doc['channel_id']}> ‚Äî ‚è∞ {doc['next']} ‚Äî üîÅ {doc['type']}\n"

        await interaction.response.send_message(texte.strip(), ephemeral=True)
    except Exception as e:
        await interaction.response.send_message(f"‚ùå Erreur : {str(e)}", ephemeral=True)

# ‚úèÔ∏è /modifier_message_programme
class ModifierMessageModal(Modal, title="‚úèÔ∏è Modifier un message programm√©"):
    def __init__(self, message_id):
        super().__init__(timeout=None)
        self.message_id = message_id

        self.nouveau_contenu = TextInput(
            label="Nouveau contenu du message",
            style=TextStyle.paragraph,
            placeholder="Entre le nouveau message ici...",
            required=True,
            max_length=2000
        )
        self.add_item(self.nouveau_contenu)

    async def on_submit(self, interaction: discord.Interaction):
        await interaction.response.defer(ephemeral=True)
        try:
            result = programmed_messages_collection.update_one(
                {"_id": ObjectId(self.message_id)},
                {"$set": {"message": textwrap.dedent(self.nouveau_contenu.value)}}
            )
            if result.matched_count:
                await interaction.followup.send("‚úÖ Message modifi√© avec succ√®s.", ephemeral=True)
            else:
                await interaction.followup.send("‚ùå ID introuvable.", ephemeral=True)
        except Exception as e:
            await interaction.followup.send(f"‚ùå Erreur : {str(e)}", ephemeral=True)

@tree.command(name="modifier_message_programme", description="Modifie un message programm√© via un modal")
@app_commands.checks.has_permissions(administrator=True)
@app_commands.describe(message_id="ID MongoDB du message √† modifier")
async def modifier_message_programme(interaction: discord.Interaction, message_id: str):
    try:
        await interaction.response.send_modal(ModifierMessageModal(message_id))
    except Exception as e:
        await interaction.response.send_message(f"‚ùå Erreur ouverture modal : {str(e)}", ephemeral=True)



# ========================================
# üî• Modal de d√©fi (VERSION BLIND√âE)
# ========================================
class DefiModal(Modal, title="üî• D√©fi de la semaine"):

    def __init__(self, salon, role, dur√©e_heures):
        super().__init__(timeout=None)
        self.salon = salon
        self.role = role
        self.dur√©e_heures = dur√©e_heures

        self.message = TextInput(
            label="Message du d√©fi",
            style=TextStyle.paragraph,
            placeholder="D√©cris ton d√©fi ici (sauts de ligne accept√©s)",
            required=True,
            max_length=2000
        )
        self.add_item(self.message)

    async def on_submit(self, interaction: discord.Interaction):
        await interaction.response.defer(ephemeral=True)
        try:
            # üîí Envoi du message du d√©fi
            msg = await self.salon.send(textwrap.dedent(self.message.value))
            await msg.add_reaction("‚úÖ")

            # üïí Calcul de la fin
            end_timestamp = time.time() + self.dur√©e_heures * 3600

            # üíæ Insertion MongoDB
            defis_collection.insert_one({
                "message_id": msg.id,
                "channel_id": self.salon.id,
                "role_id": self.role.id,
                "end_timestamp": end_timestamp
            })

            # üß® Lancement de la suppression automatique
            asyncio.create_task(remove_role_later(interaction.guild, msg.id, self.role))

            await interaction.followup.send(
                f"‚úÖ D√©fi lanc√© dans {self.salon.mention} avec le r√¥le **{self.role.name}** pour **{self.dur√©e_heures}h**",
                ephemeral=True
            )
        except Exception as e:
            await interaction.followup.send(f"‚ùå Erreur lors de la cr√©ation du d√©fi : {e}", ephemeral=True)

# ========================================
# üîÑ Suppression automatique du r√¥le (VERSION BLIND√âE)
# ========================================
async def remove_role_later(guild, message_id, role):
    try:
        data = defis_collection.find_one({"message_id": message_id})
        if not data:
            print(f"‚ö†Ô∏è Donn√©es du d√©fi introuvables pour le message {message_id}")
            return

        temps_restant = data["end_timestamp"] - time.time()
        await asyncio.sleep(max(0, temps_restant))

        for member in guild.members:
            if role in member.roles:
                try:
                    await member.remove_roles(role, reason="Fin du d√©fi")
                except Exception as e:
                    print(f"‚ùå Impossible de retirer le r√¥le √† {member.display_name} : {e}")

        defis_collection.delete_one({"message_id": message_id})
        print(f"‚úÖ R√¥le {role.name} retir√© √† tous et d√©fi supprim√© (ID message : {message_id})")

    except Exception as e:
        print(f"‚ùå Erreur dans remove_role_later : {e}")

# ========================================
# üìå /defi_semaine ‚Äî Lancer un d√©fi (VERSION BLIND√âE)
# ========================================
@tree.command(name="defi_semaine", description="Lance un d√©fi hebdomadaire avec r√¥le temporaire")
@app_commands.checks.has_permissions(administrator=True)
@app_commands.describe(
    salon="Salon o√π poster le d√©fi",
    role="R√¥le temporaire √† attribuer",
    dur√©e_heures="Dur√©e du d√©fi en heures (ex: 168 pour 7 jours)"
)
async def defi_semaine(interaction: discord.Interaction, salon: discord.TextChannel, role: discord.Role, dur√©e_heures: int):
    try:
        if dur√©e_heures <= 0 or dur√©e_heures > 10000:
            await interaction.response.send_message("‚ùå Dur√©e invalide. Choisis entre 1h et 10 000h.", ephemeral=True)
            return

        await interaction.response.send_modal(DefiModal(salon, role, dur√©e_heures))

    except Exception as e:
        await interaction.response.send_message(f"‚ùå Erreur lors de la commande : {e}", ephemeral=True)

# ========================================
# ‚úÖ R√©actions de participation au d√©fi (VERSION BLIND√âE)
# ========================================
@bot.event
async def on_raw_reaction_add(payload):
    try:
        if str(payload.emoji) != "‚úÖ":
            return

        data = defis_collection.find_one({"message_id": payload.message_id})
        if data:
            guild = bot.get_guild(payload.guild_id)
            if not guild:
                return
            member = guild.get_member(payload.user_id)
            if member and not member.bot:
                role = guild.get_role(data["role_id"])
                if role:
                    await member.add_roles(role, reason="Participation au d√©fi")
    except Exception as e:
        print(f"‚ùå Erreur ajout r√¥le d√©fi : {e}")

@bot.event
async def on_raw_reaction_remove(payload):
    try:
        if str(payload.emoji) != "‚úÖ":
            return

        data = defis_collection.find_one({"message_id": payload.message_id})
        if data:
            guild = bot.get_guild(payload.guild_id)
            if not guild:
                return
            member = guild.get_member(payload.user_id)
            if member and not member.bot:
                role = guild.get_role(data["role_id"])
                if role:
                    await member.remove_roles(role, reason="Abandon du d√©fi")
    except Exception as e:
        print(f"‚ùå Erreur retrait r√¥le d√©fi : {e}")

# ========================================
# üì© /envoyer_message ‚Äî Envoi via modal (admin, corrig√©)
# ========================================

from discord.ui import Modal, TextInput
from discord import TextStyle

class ModalEnvoyerMessage(Modal, title="üì© Envoyer un message format√©"):

    def __init__(self, salon):
        super().__init__()
        self.salon = salon
        self.contenu = TextInput(
            label="Contenu du message",
            style=TextStyle.paragraph,
            placeholder="Colle ici ton message complet avec mise en forme (sauts de ligne inclus)",
            required=True,
            max_length=2000,
            custom_id="envoyer_message_contenu"  # ‚úÖ ID unique pour √©viter les conflits
        )
        self.add_item(self.contenu)

    async def on_submit(self, interaction: discord.Interaction):
        await interaction.response.defer(ephemeral=True)  # ‚úÖ Pr√©venir le freeze sur messages longs
        try:
            await self.salon.send(textwrap.dedent(self.contenu.value))
            await interaction.followup.send(f"‚úÖ Message envoy√© dans {self.salon.mention}", ephemeral=True)
        except Exception as e:
            await interaction.followup.send(f"‚ùå Erreur : {str(e)}", ephemeral=True)

@tree.command(name="envoyer_message", description="Fait envoyer un message par le bot dans un salon via un modal")
@app_commands.checks.has_permissions(administrator=True)
@app_commands.describe(
    salon="Salon o√π envoyer le message"
)
async def envoyer_message(interaction: discord.Interaction, salon: discord.TextChannel):
    try:
        modal = ModalEnvoyerMessage(salon)
        await interaction.response.send_modal(modal)
    except Exception as e:
        await interaction.response.send_message(f"‚ùå Erreur : {str(e)}", ephemeral=True)



# ========================================
# üßπ /clear ‚Äî Supprime un certain nombre de messages dans le salon (corrig√©)
# ========================================
@bot.tree.command(name="clear", description="Supprime un nombre de messages dans ce salon (max 100)")
@app_commands.checks.has_permissions(manage_messages=True)
@app_commands.describe(
    nombre="Nombre de messages √† supprimer (entre 1 et 100)"
)
async def clear(interaction: discord.Interaction, nombre: int):
    if nombre < 1 or nombre > 100:
        await interaction.response.send_message("‚ùå Choisis un nombre entre 1 et 100.", ephemeral=True)
        return

    try:
        await interaction.response.defer(ephemeral=True)  # ‚úÖ √âvite le timeout
        deleted = await interaction.channel.purge(limit=nombre)

        await interaction.followup.send(
            f"üßΩ {len(deleted)} messages supprim√©s avec succ√®s.",
            ephemeral=True
        )

    except Exception as e:
        if not interaction.response.is_done():
            await interaction.response.send_message(f"‚ùå Erreur lors de la suppression : {str(e)}", ephemeral=True)
        else:
            await interaction.followup.send(f"‚ùå Erreur : {str(e)}", ephemeral=True)





# ========================================
# ‚úÖ Connexion et lancement s√©curis√© du bot
# ========================================

@bot.event
async def on_ready():
    print(f"‚úÖ Connect√© en tant que {bot.user} (ID: {bot.user.id})")
    await bot.wait_until_ready()

    # ‚úÖ V√©rifie la connexion MongoDB au d√©marrage
    try:
        mongo_client.admin.command("ping")
        print("üì° Connexion MongoDB : OK")
    except Exception as e:
        print(f"‚ùå Connexion MongoDB √©chou√©e : {e}")

    # üîÅ Lancer la boucle des messages programm√©s (MongoDB)
    if not check_programmed_messages.is_running():
        check_programmed_messages.start()
        print("üîÑ Boucle check_programmed_messages lanc√©e")

    # üåê Synchronisation des commandes slash
    try:
        synced = await bot.tree.sync()
        print(f"üåê {len(synced)} commandes slash synchronis√©es")
    except Exception as e:
        print(f"‚ùå Erreur de synchronisation des commandes : {e}")

# ========================================
# üöÄ Lancement du bot
# ========================================
try:
    bot.run(TOKEN)
except Exception as e:
    print(f"‚ùå Erreur critique au lancement du bot : {e}")


